{
  "env": { "es2022": true, "node": true },
  "extends": ["airbnb-base", "airbnb-typescript/base"],
  "plugins": ["unicorn"],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": ["./tsconfig.json", "./content/web/typescript/simple-setup/tsconfig.json"]
  },
  "globals": {
    "GM": "readonly",
    "unsafeWindow": "readonly",
    "dayjs": "readonly",
    "dayjs_plugin_relativeTime": "readonly",
    "Mousetrap": "readonly",
    "Notiflix": "readonly",
    "uuid": "readonly"
  },
  // "ignorePatterns": ["dist"],
  "overrides": [
    {
      "files": ["*.ts", "*.mts", "*.cts", "*.tsx"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": 2,
        "@typescript-eslint/explicit-module-boundary-types": 2,
        "@typescript-eslint/no-unsafe-argument": 2,
        "@typescript-eslint/no-unsafe-assignment": 2,
        "@typescript-eslint/no-unsafe-call": 2,
        "@typescript-eslint/no-unsafe-member-access": 2,
        "@typescript-eslint/no-unsafe-return": 2
      }
    }
  ],
  "rules": {
    // TODO Update to there projects
    "@typescript-eslint/lines-between-class-members": 0,
    // End

    "@typescript-eslint/no-duplicate-type-constituents": 2,

    "no-console": 0,
    "no-alert": 0,
    "no-await-in-loop": 0,
    "import/extensions": [2, "always", { "ts": "never" }],
    // "no-use-before-define": ["error", { "functions": false }],

    "import/no-extraneous-dependencies": 0,

    "@typescript-eslint/sort-type-constituents": 2,
    "@typescript-eslint/require-array-sort-compare": 2,
    "@typescript-eslint/promise-function-async": 2,
    "@typescript-eslint/prefer-ts-expect-error": 2,
    "@typescript-eslint/prefer-reduce-type-parameter": 2,
    // "@typescript-eslint/prefer-readonly-parameter-types": 2,
    "@typescript-eslint/prefer-optional-chain": 2,

    // Doesn't work
    "@typescript-eslint/prefer-nullish-coalescing": 2,
    "@typescript-eslint/prefer-literal-enum-member": 2,

    // Confusing
    // "@typescript-eslint/prefer-function-type": 2,
    "@typescript-eslint/prefer-enum-initializers": 2,
    "@typescript-eslint/prefer-as-const": 2,

    // Doesn't work
    // https://typescript-eslint.io/rules/non-nullable-type-assertion-style/
    // "@typescript-eslint/non-nullable-type-assertion-style": 2,
    "@typescript-eslint/no-unnecessary-condition": 2,
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": 0,
    "@typescript-eslint/no-redundant-type-constituents": 2,
    "@typescript-eslint/no-namespace": 2,
    "@typescript-eslint/no-mixed-enums": 2,
    "@typescript-eslint/no-invalid-void-type": 2,
    "@typescript-eslint/no-inferrable-types": 2,
    "@typescript-eslint/no-import-type-side-effects": 2,
    // Doesn't fully work | disabled in favor of `no-import-type-side-effects`
    /* "@typescript-eslint/consistent-type-imports": [
      2,
      {
        "prefer": "type-imports",
        "disallowTypeAnnotations": true,
        "fixStyle": "separate-type-imports"
      }
    ], */
    "@typescript-eslint/no-floating-promises": 2,
    "@typescript-eslint/no-duplicate-enum-values": 2,
    "@typescript-eslint/no-base-to-string": 2,
    "@typescript-eslint/method-signature-style": [2, "property"],
    "@typescript-eslint/member-ordering": [
      2,
      { "default": ["signature", "method", "constructor", "field"] }
    ],
    "@typescript-eslint/member-delimiter-style": [
      2,
      {
        "multiline": {
          "delimiter": "comma",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "comma",
          "requireLast": false
        },
        "multilineDetection": "brackets"
      }
    ],

    "@typescript-eslint/consistent-type-exports": 2,
    "@typescript-eslint/consistent-type-definitions": [2, "interface"],

    // https://typescript-eslint.io/rules/consistent-type-assertions/
    "@typescript-eslint/consistent-type-assertions": 2,
    "@typescript-eslint/consistent-generic-constructors": [2, "constructor"],
    "@typescript-eslint/array-type": [2, { "default": "array" }],
    "@typescript-eslint/await-thenable": 2,

    // ../eslint-plugin/docs/rules/ban-ts-comment.md
    // "@typescript-eslint/ban-ts-comment": 2, // for @ts-*

    "@typescript-eslint/type-annotation-spacing": 2,
    "@typescript-eslint/ban-types": 2,
    "@typescript-eslint/no-use-before-define": [2, { "functions": false }],

    "operator-linebreak": ["error", "after"],

    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],

    // https://eslint.org/docs/latest/rules/padding-line-between-statements
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": "return" },
      // { "blankLine": "always", "prev": "*", "next": "block" },
      // { "blankLine": "always", "prev": "block", "next": "*" },
      // { "blankLine": "always", "prev": "*", "next": "block-like" }
      // { "blankLine": "always", "prev": "block-like", "next": "*" },
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "function",
          "multiline-const",
          "switch",
          // "case",
          "try",
          "while",
          "for"
          // Before only
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "function",
          "multiline-const",
          "switch",
          // "case",
          "try",
          "while",
          "for",
          // After only
          "block-like"
        ],
        "next": "*"
      }
    ],

    // https://eslint.org/docs/latest/rules/arrow-body-style
    // "arrow-body-style": ["error", "as-needed"]

    // https://eslint.org/docs/latest/rules/object-curly-newline
    "object-curly-newline": 0,

    // https://eslint.org/docs/latest/rules/arrow-body-style
    "arrow-body-style": 0,

    // https://eslint.org/docs/latest/rules/no-implicit-coercion
    "no-implicit-coercion": [
      "error",
      {
        "string": false,
        "number": true,
        "boolean": true,
        "disallowTemplateShorthand": false
      }
    ],

    "no-empty": [2, { "allowEmptyCatch": true }],
    "default-case": 0,

    // https://stackoverflow.com/questions/68720053
    // "@typescript-eslint/strict-boolean-expressions": "warn",

    // Overridden
    "no-nested-ternary": 0,

    // unicorns
    "unicorn/better-regex": 2,
    "unicorn/catch-error-name": [2, { "name": "exception" }],
    "unicorn/empty-brace-spaces": 2,
    "unicorn/explicit-length-check": 2,
    "unicorn/new-for-builtins": 2,
    "unicorn/no-array-callback-reference": 2,
    "unicorn/no-array-for-each": 2,
    "unicorn/no-array-push-push": 2,
    "unicorn/no-await-expression-member": 2,
    "unicorn/no-console-spaces": 2,
    "unicorn/no-for-loop": 2,
    "unicorn/no-instanceof-array": 2,
    "unicorn/no-invalid-remove-event-listener": 2,
    "unicorn/no-lonely-if": 2,
    "unicorn/no-negated-condition": 2,
    "unicorn/no-nested-ternary": 2,
    "unicorn/no-new-array": 2,
    "unicorn/no-null": 2,
    "unicorn/no-object-as-default-parameter": 2,
    "unicorn/no-thenable": 2,
    // "unicorn/no-this-assignment": 2,
    "unicorn/no-typeof-undefined": 2,
    "unicorn/no-unreadable-array-destructuring": 2,
    "unicorn/no-unsafe-regex": 2,
    "unicorn/no-unused-properties": 2,
    "unicorn/no-useless-fallback-in-spread": 2,
    "unicorn/no-useless-promise-resolve-reject": 2,
    "unicorn/no-useless-spread": 2,
    // "unicorn/no-useless-undefined": 2,
    "unicorn/numeric-separators-style": 2,
    "unicorn/prefer-add-event-listener": 2,
    "unicorn/prefer-array-find": [2, { "checkFromLast": true }],
    "unicorn/prefer-array-index-of": 2,
    "unicorn/prefer-array-some": 2,
    "unicorn/prefer-at": 2,
    "unicorn/prefer-date-now": 2,
    "unicorn/prefer-dom-node-append": 2,
    "unicorn/prefer-dom-node-dataset": 2,
    "unicorn/prefer-dom-node-remove": 2,
    "unicorn/prefer-dom-node-text-content": 2,
    "unicorn/prefer-export-from": 2,
    "unicorn/prefer-includes": 2,
    "unicorn/prefer-json-parse-buffer": 2,
    "unicorn/prefer-logical-operator-over-ternary": 2,
    "unicorn/prefer-modern-dom-apis": 2,
    "unicorn/prefer-module": 2,
    "unicorn/prefer-negative-index": 2,
    "unicorn/prefer-node-protocol": 2,
    "unicorn/prefer-number-properties": 2,
    "unicorn/prefer-object-from-entries": 2,
    "unicorn/prefer-optional-catch-binding": 2,
    "unicorn/prefer-prototype-methods": 2,
    "unicorn/prefer-query-selector": 2,
    "unicorn/prefer-reflect-apply": 2,
    "unicorn/prefer-regexp-test": 2,
    "unicorn/prefer-set-has": 2,
    "unicorn/prefer-set-size": 2,
    "unicorn/prefer-spread": 2,
    "unicorn/prefer-string-replace-all": 2,
    "unicorn/prefer-string-slice": 2,
    "unicorn/prefer-string-trim-start-end": 2,
    "unicorn/prefer-switch": 2,
    // "unicorn/prefer-ternary": 2,
    "unicorn/prefer-type-error": 2,
    "unicorn/relative-url-style": 2,
    "unicorn/require-array-join-separator": 2,
    "unicorn/require-number-to-fixed-digits-argument": 2,
    "unicorn/require-post-message-target-origin": 2,
    "unicorn/switch-case-braces": 2

    // Could be the cause of hanging vscode sometimes
    // "unicorn/throw-new-error": 2

    // "unicorn/prevent-abbreviations": 2
    // "unicorn/template-indent": 2
  }
}
